#!/bin/sh
#Copyright 2021 Nokia
#Licensed under the BSD 3-Clause Clear License.
#SPDX-License-Identifier: BSD-3-Clear
#
#
#  We assume python yaml libraries and curl are installed
#
#  apt install curl
#
#
#This is what we need to generate
# This shows a tpm2 structure with TWO !! TPMs... :-)
# And a UEFI entry
# 
# {
#     "description": "The Ubuntu VM",
#     "endpoint": "http://192.168.1.82:8530",
#     "itemid": "3963611a-6edc-43b8-bd9c-9dd81b296855",
#     "location": "60\u00b010\u203215\u2033N 24\u00b056\u203215\u2033E",
#     "name": "Ubuntu VM",
#     "protocol": "A10HTTPREST",
#     "tpm2": {
#         "tpm0": {
#             "akhandle": "0x810100AA",
#             "akname": "x",
#             "akpub": "x",
#             "ekhandle": "0x810100EE",
#             "ekname": "x",
#             "ekpub": "x"
#         },
#         "tpm1": {
#             "akhandle": "0x810100AA",
#             "akname": "x",
#             "akpub": "x",
#             "ekhandle": "0x810100EE",
#             "ekname": "x",
#             "ekpub": "x"
#         }
#     },
#     "type": [
#         "tpm2",
#         "ibmtpmsim"
#     ],
#     "uefi": {
#         "eventlog": "/sys/kernel/security/tpm0/binary_bios_measurements"
#     }
# }
#


echo "\e[32mProvisioning Script: JSON Element Description Generation\e[0m"

echo "TCTI is (if set):" $TPM2TOOLS_TCTI
#
#Calculated defaults (note the _C in the name)
#

HOSTNAME_C=`hostname`
#hostname -I generates a trailing space, xargs without argumements removes it - dyna cwl eh?!"
IPADDRESS_C=`hostname -I | xargs`
PORT_C=8530
ASURL_C=http://10.144.176.154:8510
PROTOCOL_C=A10HTTPREST
NAME_C=`hostname`
DESCRIPTION_C="to lazy to write this"
LOCATION_C="60.22309,24.75877"
TYPES_C="x86,tpm2,uefi,arm,pi"

#Element Identification Details
echo "\e[46mSetting up the basic element identification details\e[0m"


read -p "Short  Name [$HOSTNAME_C]: " NAME
NAME=${NAME:-$NAME_C}

read -p "Longer Description [$DESCRIPTION_C]: " DESCRIPTION
DESCRIPTION=${DESCRIPTION:-$DESCRIPTION_C}

read -p "Location [$LOCATION_C]: " LOCATION
LOCATION=${LOCATION:-$LOCATION_C}

read -p "Types (comma separated) [$TYPES_C]: " TYPES
TYPES=${TYPES:-$TYPES_C}

read -p "This machine's hostname [$HOSTNAME_C]: " HOSTNAME
HOSTNAME=${HOSTNAME:-$HOSTNAME_C}

read -p "This machine's IP address [$IPADDRESS_C]: " IPADDRESS
IPADDRESS=${IPADDRESS:-$IPADDRESS_C}

read -p "Protocol [$PROTOCOL_C]: " PROTOCOL
PROTOCOL=${PROTOCOL:-$PROTOCOL_C}

read -p "TA Port [$PORT_C]: " PORT
PORT=${PORT:-$PORT_C}

read -p "Attestation server URLs (comma separated if more than one) [$ASURL_C]: " ASURL
ASURL=${ASURL:-$ASURL_C}



#
# TPM Stuff
#

EKHANDLE_C=0x810100ee
AKHANDLE_C=0x810100aa

echo "\e[46mSetting up keys - the EK will be removed after these operations\e[0m"
echo "\e[46mGeneration will fail if keys already exist at the given handles\e[0m"

read -p "Enter EK handle location [$EKHANDLE_C]: " EKHANDLE
EKHANDLE=${EKHANDLE:-$EKHANDLE_C}


read -p "Enter AK handle location [$AKHANDLE_C]: " AKHANDLE
AKHANDLE=${AKHANDLE:-$AKHANDLE_C}


#
# UEFI Stuff
#

UEFIEVENTLOG_C=/sys/kernel/security/tpm0/binary_bios_measurements

echo "\e[35mIf the UEFI eventlog is available accept the default (or modify the location)\e[0m"
echo "\e[35mIf this is not a UEFI machine then delete the default answer and leave blank\e[0m"

read -p "Enter UEFI eventlog location [$UEFIEVENTLOG_C]: " UEFIEVENTLOG
UEFIEVENTLOG=${UEFIEVENTLOG:-$UEFIEVENTLOG_C}



echo "\n\e[32mThis is what I have\e[0m"

echo $NAME
echo $DESCRIPTION
echo $LOCATION
echo $TYPES
echo $HOSTNAME
echo $PROTOCOL $IPADDRESS $PORT
echo $ASURL
echo $EKHANDLE
echo $AKHANDLE
echo $UEFIEVENTLOG

read -p "Does everything look good?  Ctrl-C exits, Enter continues" x

#
# Provisioning the keys in the TPM
#

echo "\e[32mContinuing with setup\e[0m"


echo "Removing any existing keys from $EKHANDLE and $AKHANDLE"
tpm2_evictcontrol -Q -c $EKHANDLE
tpm2_evictcontrol -Q -c $AKHANDLE
echo "Clearing temporary objects from TPM"
tpm2_flushcontext -Q -t
tpm2_flushcontext -Q -s
tpm2_flushcontext -Q -l

echo "Persistent handles - should be empty:"
tpm2_getcap handles-persistent
echo "Transient handles - should be empty:"
tpm2_getcap handles-transient
echo "Session handles - should be empty:"
tpm2_getcap handles-loaded-session
read -p "TPM Cleared?  Ctrl-C exits, Enter continues" x




echo "Generating temporary directory"
TMPDIR=/tmp/
mydir=$(mktemp -d "${TMPDIR:-$mydir/}$(basename $0).XXXXXXXXXXXX")
echo $mydir



echo "Generating EK"
tpm2_createek -Q -c $EKHANDLE -G rsa

echo "Generating AK"
tpm2_createak -Q -C $EKHANDLE -c $mydir/ak.ctx -G rsa -g sha256 -s rsassa -u $mydir/ak.pub 
tpm2_evictcontrol -Q -c $mydir/ak.ctx $AKHANDLE

echo "Generating PEM and data files"
#NB: these must not be "quiet -Q otherwise there's no output"
tpm2_readpublic -c $EKHANDLE > $mydir/ek.yaml 
tpm2_readpublic -c $AKHANDLE > $mydir/ak.yaml 
#These can be quiet because there's an explicit output file
tpm2_readpublic -Q -c $EKHANDLE -o $mydir/ek.pem -f pem 
tpm2_readpublic -Q -c $AKHANDLE -o $mydir/ak.pem -f pem 

echo "Listing temporary files in " $mydir
ls -l $mydir 

echo "Clearing temporary objects from TPM"
tpm2_flushcontext -Q -t
tpm2_flushcontext -Q -s
tpm2_flushcontext -Q -l

echo "Persistent handles - should contain AK and EK:"
tpm2_getcap handles-persistent
echo "Transient handles - should be empty:"
tpm2_getcap handles-transient
echo "Session handles - should (might) be empty:"
tpm2_getcap handles-loaded-session


read -p "TPM Check Things #2?  Ctrl-C exits, Enter continues" x


#
# This was for debugging
#

#echo "YAML FILE"
#cat $mydir/ak.yaml
#read -p "TPM Check Things #1?  Ctrl-C exits, Enter continues" x

#echo "READPUBLIC"
#tpm2_readpublic -c $AKHANDLE
#echo "yaml"
#cat $mydir/ak.yaml
#read -p "TPM Check Things #2?  Ctrl-C exits, Enter continues" x


echo "Constructing JSON object"
python3 constructTPM2JSONobject.py $NAME "$DESCRIPTION" $LOCATION $TYPES $HOSTNAME $PROTOCOL $IPADDRESS $PORT $ASURL $EKHANDLE $AKHANDLE $UEFIEVENTLOG $mydir/ak.pem $mydir/ak.yaml $mydir/ek.pem $mydir/ek.yaml


echo "This is the start of the object*********************"
cat enrol.json
echo "This is the end of the object*********************"

read -p "Does everything look good?  Ctrl-C exits, Enter continues" x

#
#Enrollment
#
echo "\nSetting up the basic element identification details"

ENROLLMENT_C="http://192.168.1.82:8521"

read -p "Address of enrollment server [$ENROLLMENT_C]: " ENROLLMENT
ENROLLMENT=${ENROLLMENT:-$ENROLLMENT_C}

python3 enrol.py $ENROLLMENT enrol.json

echo "Done."